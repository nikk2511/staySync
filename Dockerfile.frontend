# Frontend Dockerfile
# Multi-stage build for production optimization

# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --silent

# Copy source code
COPY frontend/ .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application from build stage
COPY --from=build /app/build /usr/share/nginx/html

# Create non-root user for security
RUN addgroup -g 1001 -S nginx && \
    adduser -S musicapp -u 1001 -G nginx

# Set permissions
RUN chown -R musicapp:nginx /usr/share/nginx/html && \
    chown -R musicapp:nginx /var/cache/nginx && \
    chown -R musicapp:nginx /var/log/nginx && \
    chown -R musicapp:nginx /etc/nginx/conf.d

# Create pid directory
RUN mkdir -p /var/run/nginx && \
    chown -R musicapp:nginx /var/run/nginx

# Switch to non-root user
USER musicapp

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]